/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "./common";

export interface ManagerInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "balanceOfLockedTokens"
      | "balanceOfUnlockedTokens"
      | "campaigns"
      | "createCampaign"
      | "getStatus"
      | "invest"
      | "investments"
      | "totalCampaigns"
      | "totalSupplyOfLockedTokens"
      | "totalSupplyOfUnlockedTokens"
      | "withdraw"
      | "withdrawals"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic: "CamapaignCreated" | "Invested" | "Withdrawal"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "balanceOfLockedTokens",
    values: [BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "balanceOfUnlockedTokens",
    values: [BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "campaigns",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "createCampaign",
    values: [
      string,
      string,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      AddressLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getStatus",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "invest",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "investments",
    values: [BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "totalCampaigns",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalSupplyOfLockedTokens",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "totalSupplyOfUnlockedTokens",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "withdraw",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawals",
    values: [BigNumberish, AddressLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "balanceOfLockedTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "balanceOfUnlockedTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "campaigns", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "createCampaign",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getStatus", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "invest", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "investments",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalCampaigns",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalSupplyOfLockedTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalSupplyOfUnlockedTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "withdrawals",
    data: BytesLike
  ): Result;
}

export namespace CamapaignCreatedEvent {
  export type InputTuple = [
    campaignId: BigNumberish,
    owner: AddressLike,
    tokenName: string,
    tokenSymbol: string,
    tokenAddress: AddressLike,
    saleStartTime: BigNumberish,
    saleEndTime: BigNumberish,
    vestingEndTime: BigNumberish,
    totalRequirement: BigNumberish,
    maxTokenSupply: BigNumberish,
    upAddress: AddressLike
  ];
  export type OutputTuple = [
    campaignId: bigint,
    owner: string,
    tokenName: string,
    tokenSymbol: string,
    tokenAddress: string,
    saleStartTime: bigint,
    saleEndTime: bigint,
    vestingEndTime: bigint,
    totalRequirement: bigint,
    maxTokenSupply: bigint,
    upAddress: string
  ];
  export interface OutputObject {
    campaignId: bigint;
    owner: string;
    tokenName: string;
    tokenSymbol: string;
    tokenAddress: string;
    saleStartTime: bigint;
    saleEndTime: bigint;
    vestingEndTime: bigint;
    totalRequirement: bigint;
    maxTokenSupply: bigint;
    upAddress: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace InvestedEvent {
  export type InputTuple = [
    campaignId: BigNumberish,
    investor: AddressLike,
    investmentTime: BigNumberish,
    amount: BigNumberish,
    balance: BigNumberish
  ];
  export type OutputTuple = [
    campaignId: bigint,
    investor: string,
    investmentTime: bigint,
    amount: bigint,
    balance: bigint
  ];
  export interface OutputObject {
    campaignId: bigint;
    investor: string;
    investmentTime: bigint;
    amount: bigint;
    balance: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace WithdrawalEvent {
  export type InputTuple = [
    campaignId: BigNumberish,
    investor: AddressLike,
    withdrawalTime: BigNumberish,
    amount: BigNumberish,
    balance: BigNumberish
  ];
  export type OutputTuple = [
    campaignId: bigint,
    investor: string,
    withdrawalTime: bigint,
    amount: bigint,
    balance: bigint
  ];
  export interface OutputObject {
    campaignId: bigint;
    investor: string;
    withdrawalTime: bigint;
    amount: bigint;
    balance: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface Manager extends BaseContract {
  connect(runner?: ContractRunner | null): Manager;
  waitForDeployment(): Promise<this>;

  interface: ManagerInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  balanceOfLockedTokens: TypedContractMethod<
    [campaignId: BigNumberish, owner: AddressLike],
    [bigint],
    "view"
  >;

  balanceOfUnlockedTokens: TypedContractMethod<
    [campaignId: BigNumberish, owner: AddressLike],
    [bigint],
    "view"
  >;

  campaigns: TypedContractMethod<
    [arg0: BigNumberish],
    [
      [
        bigint,
        string,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        string,
        string
      ] & {
        id: bigint;
        tokenAddress: string;
        saleStartTime: bigint;
        saleEndTime: bigint;
        vestingEndTime: bigint;
        totalRequirement: bigint;
        maxTokenSupply: bigint;
        raised: bigint;
        withdrawals: bigint;
        upAddress: string;
        owner: string;
      }
    ],
    "view"
  >;

  createCampaign: TypedContractMethod<
    [
      _tokenName: string,
      _tokenSymbol: string,
      _saleStartTime: BigNumberish,
      _saleEndTime: BigNumberish,
      _vestingEndTime: BigNumberish,
      _totalRequirement: BigNumberish,
      _maxTokenSupply: BigNumberish,
      _upAddress: AddressLike
    ],
    [void],
    "nonpayable"
  >;

  getStatus: TypedContractMethod<[campaignId: BigNumberish], [bigint], "view">;

  invest: TypedContractMethod<[campaignId: BigNumberish], [void], "payable">;

  investments: TypedContractMethod<
    [arg0: BigNumberish, arg1: AddressLike],
    [bigint],
    "view"
  >;

  totalCampaigns: TypedContractMethod<[], [bigint], "view">;

  totalSupplyOfLockedTokens: TypedContractMethod<
    [campaignId: BigNumberish],
    [bigint],
    "view"
  >;

  totalSupplyOfUnlockedTokens: TypedContractMethod<
    [campaignId: BigNumberish],
    [bigint],
    "view"
  >;

  withdraw: TypedContractMethod<
    [campaignId: BigNumberish],
    [void],
    "nonpayable"
  >;

  withdrawals: TypedContractMethod<
    [arg0: BigNumberish, arg1: AddressLike],
    [bigint],
    "view"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "balanceOfLockedTokens"
  ): TypedContractMethod<
    [campaignId: BigNumberish, owner: AddressLike],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "balanceOfUnlockedTokens"
  ): TypedContractMethod<
    [campaignId: BigNumberish, owner: AddressLike],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "campaigns"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [
        bigint,
        string,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        string,
        string
      ] & {
        id: bigint;
        tokenAddress: string;
        saleStartTime: bigint;
        saleEndTime: bigint;
        vestingEndTime: bigint;
        totalRequirement: bigint;
        maxTokenSupply: bigint;
        raised: bigint;
        withdrawals: bigint;
        upAddress: string;
        owner: string;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "createCampaign"
  ): TypedContractMethod<
    [
      _tokenName: string,
      _tokenSymbol: string,
      _saleStartTime: BigNumberish,
      _saleEndTime: BigNumberish,
      _vestingEndTime: BigNumberish,
      _totalRequirement: BigNumberish,
      _maxTokenSupply: BigNumberish,
      _upAddress: AddressLike
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "getStatus"
  ): TypedContractMethod<[campaignId: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "invest"
  ): TypedContractMethod<[campaignId: BigNumberish], [void], "payable">;
  getFunction(
    nameOrSignature: "investments"
  ): TypedContractMethod<
    [arg0: BigNumberish, arg1: AddressLike],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "totalCampaigns"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "totalSupplyOfLockedTokens"
  ): TypedContractMethod<[campaignId: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "totalSupplyOfUnlockedTokens"
  ): TypedContractMethod<[campaignId: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "withdraw"
  ): TypedContractMethod<[campaignId: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "withdrawals"
  ): TypedContractMethod<
    [arg0: BigNumberish, arg1: AddressLike],
    [bigint],
    "view"
  >;

  getEvent(
    key: "CamapaignCreated"
  ): TypedContractEvent<
    CamapaignCreatedEvent.InputTuple,
    CamapaignCreatedEvent.OutputTuple,
    CamapaignCreatedEvent.OutputObject
  >;
  getEvent(
    key: "Invested"
  ): TypedContractEvent<
    InvestedEvent.InputTuple,
    InvestedEvent.OutputTuple,
    InvestedEvent.OutputObject
  >;
  getEvent(
    key: "Withdrawal"
  ): TypedContractEvent<
    WithdrawalEvent.InputTuple,
    WithdrawalEvent.OutputTuple,
    WithdrawalEvent.OutputObject
  >;

  filters: {
    "CamapaignCreated(uint256,address,string,string,address,uint256,uint256,uint256,uint256,uint256,address)": TypedContractEvent<
      CamapaignCreatedEvent.InputTuple,
      CamapaignCreatedEvent.OutputTuple,
      CamapaignCreatedEvent.OutputObject
    >;
    CamapaignCreated: TypedContractEvent<
      CamapaignCreatedEvent.InputTuple,
      CamapaignCreatedEvent.OutputTuple,
      CamapaignCreatedEvent.OutputObject
    >;

    "Invested(uint256,address,uint256,uint256,uint256)": TypedContractEvent<
      InvestedEvent.InputTuple,
      InvestedEvent.OutputTuple,
      InvestedEvent.OutputObject
    >;
    Invested: TypedContractEvent<
      InvestedEvent.InputTuple,
      InvestedEvent.OutputTuple,
      InvestedEvent.OutputObject
    >;

    "Withdrawal(uint256,address,uint256,uint256,uint256)": TypedContractEvent<
      WithdrawalEvent.InputTuple,
      WithdrawalEvent.OutputTuple,
      WithdrawalEvent.OutputObject
    >;
    Withdrawal: TypedContractEvent<
      WithdrawalEvent.InputTuple,
      WithdrawalEvent.OutputTuple,
      WithdrawalEvent.OutputObject
    >;
  };
}
